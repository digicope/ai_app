# 함수는 초기 생각들을 생성한 후, 각 생각에 대해 더 깊이 탐색하는 과정을 거칩니다.
# 더 깊이 탐색한 결과 중 길이가 가장 긴 응답을 최적의 생각으로 선택
def tree_of_thoughts(prompt, depth=2):
    """
    Tree of Thoughts 방식을 사용하여 최적의 생각을 찾는 함수.
    """
    initial_thoughts = generate_thoughts(prompt)
    print(f"Initial thoughts:\n{initial_thoughts}\n")

    best_thought = None
    for i, thought in enumerate(initial_thoughts):
        print(f"Exploring thought {i + 1}: {thought}")
        next_prompt = f"{thought} 다음에 어떻게 할 수 있을까요?"
        deeper_thoughts = generate_thoughts(next_prompt)

        # 간단한 평가 방법: 길이가 가장 긴 응답을 최선으로 선택
        best_deeper_thought = max(deeper_thoughts, key=len)
        print(f"Deeper thought: {best_deeper_thought}\n")

        # 최적의 생각 갱신
        if not best_thought or len(best_deeper_thought) > len(best_thought):
            best_thought = best_deeper_thought

    print(f"Best thought: {best_thought}")

# 사용 예제
user_prompt = "자연을 보존하기 위한 창의적인 아이디어가 무엇일까요?"
tree_of_thoughts(user_prompt)
