def search_documents(query):
    # 이 함수는 문서를 검색하는 역할을 합니다.
    # 실제로는 외부 검색 엔진이나 데이터베이스에 쿼리를 보내야 하지만,
    # 이 예제에서는 간단히 미리 정의된 문서를 반환합니다.
    
    # 예제 문서
    documents = [
        "OpenAI는 인공지능 연구소로, 다양한 AI 기술을 개발합니다.",
        "GPT-4는 OpenAI에서 개발한 언어 모델로, 자연어 처리를 위한 강력한 도구입니다.",
        "RAG는 정보 검색과 텍스트 생성을 결합하여 더 나은 결과를 제공합니다."
    ]
    
    # 간단한 검색 논리: 입력 쿼리와 관련된 문서 필터링
    relevant_docs = [doc for doc in documents if query.lower() in doc.lower()]
    
    return relevant_docs

def generate_answer(query, documents):
    # 검색된 문서를 바탕으로 답변 생성
    combined_context = "\n".join(documents)
    prompt = f"질문: {query}\n\n문서:\n{combined_context}\n\n답변:"
    
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
                {"role": "user", 
                 "content": prompt}
                ],
        max_tokens=100,
        temperature=0.5
    )
    
    return response.choices[0].message.content

# query = "OpenAI는 무엇인가요?"
# query = "GPT-4는 무엇인가요?"
query = "RAG는 무엇인가요?"

# 1. 문서 검색
documents = search_documents(query)

# 2. 답변 생성
answer = generate_answer(query, documents)

print("질문:", query)
print("답변:", answer)
